#!/bin/bash

set -e -u
revisioni=10#$(ls out | grep -o [0-9].[0-9][0-9] | grep -o [0-9][0-9] | tail -1)
((revisioni++))
if [ "$revisioni" -lt "10" ]; then
	revision=0$revisioni
else
	revision=$revisioni
fi
iso_name=fluxcapacity
iso_label="Flux_Capacity"
iso_version=6.$revision
install_dir=fluxstall
arch=$(uname -m)
work_dir=work
out_dir=out
verbose="y"

script_path=$(readlink -f ${0%/*})

# Base installation (root-image)
make_basefs() {
    mkarchiso ${verbose} -C pacman.conf -w "${work_dir}" -D "${install_dir}" init
#    mkarchiso ${verbose} -C pacman.conf -w "${work_dir}" -D "${install_dir}" -p "syslinux" create
    mkarchiso ${verbose} -C pacman.conf -w "${work_dir}" -D "${install_dir}" -p "$(cat packages.list)" install
    cp -r overlay/* "${work_dir}"/root-image/
    tar -czf work/root-image/etc/overlay.tar.gz overlay
    mkarchiso ${verbose} -w "${work_dir}" -D "${install_dir}" -r 'locale-gen' run
}

# Copy mkinitcpio archiso hooks (root-image)
make_setup_mkinitcpio() {
   if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        cp /usr/lib/initcpio/hooks/archiso ${work_dir}/root-image/usr/lib/initcpio/hooks
        cp /usr/lib/initcpio/install/archiso ${work_dir}/root-image/usr/lib/initcpio/install
	cp /usr/lib/initcpio/install/archiso_loop_mnt ${work_dir}/root-image/usr/lib/initcpio/install/
	cp /usr/lib/initcpio/hooks/archiso_loop_mnt ${work_dir}/root-image/usr/lib/initcpio/hooks/
        cp ${script_path}/mkinitcpio.conf ${work_dir}/root-image/etc/flux-mkinitcpio.conf
        : > ${work_dir}/build.${FUNCNAME}
   fi
}

# Prepare ${install_dir}/boot/
make_boot() {
pacman -Sy
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        mkdir -p ${work_dir}/iso/${install_dir}/boot/${arch}
        mkarchiso ${verbose} -w "${work_dir}" -D "${install_dir}" -r \
        'mkinitcpio \
            -c /etc/flux-mkinitcpio.conf \
            -k $(pacman -Si linux | grep Version | grep -o [0-9].[0-9].[0-9]-[0-9])-ARCH \
            -g /boot/fluxiso.img' run
        cp ${work_dir}/root-image/boot/fluxiso.img ${work_dir}/iso/${install_dir}/boot/${arch}/
        cp ${work_dir}/root-image/boot/vmlinuz-linux ${work_dir}/iso/${install_dir}/boot/${arch}/vmlinuz
        : > ${work_dir}/build.${FUNCNAME}
    fi
}

# Prepare /${install_dir}/boot/syslinux
make_syslinux() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        mkdir -p ${work_dir}/iso/${install_dir}/boot/syslinux
        sed "s|%ARCHISO_LABEL%|${iso_label}|g;
            s|%INSTALL_DIR%|${install_dir}|g;
            s|%ARCH%|${arch}|g" ${script_path}/syslinux/syslinux.cfg > ${work_dir}/iso/${install_dir}/boot/syslinux/syslinux.cfg
#        cp ${work_dir}/root-image/usr/lib/syslinux/menu.c32 ${work_dir}/iso/${install_dir}/boot/syslinux/
	 cp -rf syslinux/* ${work_dir}/iso/${install_dir}/boot/syslinux/
        : > ${work_dir}/build.${FUNCNAME}
    fi
}

# Prepare /isolinux
make_isolinux() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        mkdir -p ${work_dir}/iso/isolinux
        sed "s|%INSTALL_DIR%|${install_dir}|g" ${script_path}/isolinux/isolinux.cfg > ${work_dir}/iso/isolinux/isolinux.cfg
        cp ${work_dir}/root-image/usr/lib/syslinux/isolinux.bin ${work_dir}/iso/isolinux/
        cp ${work_dir}/root-image/usr/lib/syslinux/isohdpfx.bin ${work_dir}/iso/isolinux/
        : > ${work_dir}/build.${FUNCNAME}
    fi
}

# Process aitab
make_aitab() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        sed "s|%ARCH%|${arch}|g" ${script_path}/aitab > ${work_dir}/iso/${install_dir}/aitab
        : > ${work_dir}/build.${FUNCNAME}
    fi
}

# Build all filesystem images specified in aitab (.fs .fs.sfs .sfs)
make_prepare() {
    mkarchiso ${verbose} -C pacman.conf -w "${work_dir}" -D "${install_dir}" prepare
}

# Build ISO
make_iso() {
    mkarchiso ${verbose} -w "${work_dir}" -D "${install_dir}" checksum
    mkarchiso ${verbose} -w "${work_dir}" -D "${install_dir}" -L "${iso_label}" -o "${out_dir}" iso "${iso_name}-${iso_version}-${arch}.iso"
}

if [[ ${verbose} == "y" ]]; then
    verbose="-v"
else
    verbose=""
fi

make_basefs
make_setup_mkinitcpio
make_boot
make_syslinux
make_isolinux
make_aitab
make_prepare
make_iso
